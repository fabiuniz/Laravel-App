# 🚀 Laravel Docker App - CI/CD Pipeline GitHub Actions para Google Cloud Run
# Autor: Fabiano Rocha/Fabiuniz
# Descrição: Pipeline completo com testes, build Docker e deploy automatizado

name: 🚀 Deploy Laravel to Google Cloud Run

on:
  push:
    branches:
      - main            # 🌐 Produção
      - develop         # 🧪 Staging
  pull_request:
    branches:
      - main
      - develop

# ⚙️ Variáveis de ambiente globais
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: laravel-app
  SERVICE: laravel-docker-app
  REGION: us-central1

jobs:
  # 1️⃣ JOB: Testes Automatizados
  tests:
    name: 🧪 Executar Testes
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: laravel_test
          MYSQL_USER: laravel_user
          MYSQL_PASSWORD: laravel_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql
          coverage: xdebug

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: 🔧 Instalar dependências Composer
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: 📋 Copiar arquivo de ambiente de teste
        run: |
          cp .env.example .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laravel_test" >> .env
          echo "DB_USERNAME=laravel_user" >> .env
          echo "DB_PASSWORD=laravel_password" >> .env

      - name: 🔑 Gerar chave da aplicação
        run: php artisan key:generate

      - name: 🗄️ Executar migrações
        run: php artisan migrate --force

      - name: ✅ Executar testes PHPUnit
        run: php artisan test --coverage-php build/coverage.php

      - name: 📊 Executar verificações de código
        run: |
          if [ -f ./vendor/bin/phpcs ]; then
            ./vendor/bin/phpcs --standard=PSR12 app/
          fi

  ---
  # 2️⃣ JOB: Build e Deploy para Produção
  deploy-production:
    name: 🚀 Deploy Produção
    needs: tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔐 Configurar autenticação Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: ⚙️ Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configurar Docker para Artifact Registry
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: 🏗️ Build da imagem Docker
        run: |
          docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA \
            --build-arg APP_ENV=production \
            --build-arg APP_DEBUG=false \
            .

      - name: 📤 Push da imagem para Artifact Registry
        run: |
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA

      - name: 🚀 Deploy no Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --port=80
            --memory=512Mi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=80
            --timeout=300
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:laravel-db-prod
            --set-env-vars="APP_ENV=production"
            --set-env-vars="APP_DEBUG=false"
            --set-env-vars="LOG_CHANNEL=stderr"
            --set-env-vars="DB_CONNECTION=mysql"
            --set-env-vars="DB_PORT=3306"
            --set-env-vars="DB_DATABASE=${{ secrets.DB_DATABASE }}"
            --set-env-vars="DB_USERNAME=${{ secrets.DB_USERNAME }}"
            --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            --set-env-vars="APP_KEY=${{ secrets.LARAVEL_APP_KEY }}"
            --set-env-vars="CACHE_DRIVER=file"
            --set-env-vars="SESSION_DRIVER=file"
            --set-env-vars="QUEUE_CONNECTION=sync"

      - name: 🗄️ Executar migrações via Cloud Run Job
        run: |
          JOB_NAME="laravel-migrate-prod-$(echo $GITHUB_SHA | cut -c1-8)"
          
          gcloud run jobs create $JOB_NAME \
            --image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA \
            --region=$REGION \
            --set-cloudsql-instances=$PROJECT_ID:$REGION:laravel-db-prod \
            --set-env-vars="APP_ENV=production" \
            --set-env-vars="APP_DEBUG=false" \
            --set-env-vars="DB_CONNECTION=mysql" \
            --set-env-vars="DB_PORT=3306" \
            --set-env-vars="DB_DATABASE=${{ secrets.DB_DATABASE }}" \
            --set-env-vars="DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --set-env-vars="APP_KEY=${{ secrets.LARAVEL_APP_KEY }}" \
            --command="php" \
            --args="artisan,migrate,--force" \
            --memory=256Mi \
            --cpu=1 \
            --max-retries=3 \
            --parallelism=1 \
            --task-timeout=600

          # Executar o job de migração
          gcloud run jobs execute $JOB_NAME --region=$REGION --wait

          # Limpar job após execução
          gcloud run jobs delete $JOB_NAME --region=$REGION --quiet

      - name: 🧹 Otimização pós-deploy
        run: |
          JOB_NAME="laravel-optimize-prod-$(echo $GITHUB_SHA | cut -c1-8)"
          
          # Criar job para otimização do Laravel
          gcloud run jobs create $JOB_NAME \
            --image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA \
            --region=$REGION \
            --set-env-vars="APP_ENV=production" \
            --set-env-vars="APP_DEBUG=false" \
            --set-env-vars="APP_KEY=${{ secrets.LARAVEL_APP_KEY }}" \
            --command="/bin/bash" \
            --args="-c,php artisan config:cache && php artisan route:cache && php artisan view:cache" \
            --memory=256Mi \
            --cpu=1 \
            --max-retries=2 \
            --parallelism=1 \
            --task-timeout=300 \
            --replace

          # Executar otimização
          gcloud run jobs execute $JOB_NAME --region=$REGION --wait

          # Limpar job
          gcloud run jobs delete $JOB_NAME --region=$REGION --quiet

      - name: 🔍 Verificação de saúde
        run: |
          # Aguardar o serviço ficar disponível
          sleep 30
          
          # Obter URL do serviço
          SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
          
          # Verificar saúde da aplicação
          echo "🔍 Verificando saúde em: $SERVICE_URL"
          
          # Tentar conectar com retry
          for i in {1..5}; do
            if curl -f -s "$SERVICE_URL/api/hello" > /dev/null; then
              echo "✅ Aplicação está respondendo!"
              break
            else
              echo "⏳ Tentativa $i/5 falhou, aguardando 15s..."
              sleep 15
            fi
          done
          
          # Verificar se o endpoint principal está funcionando
          curl -f -s "$SERVICE_URL" > /dev/null || (echo "❌ Aplicação não está respondendo corretamente" && exit 1)
          
          echo "🎉 Deploy realizado com sucesso!"
          echo "🌐 URL da aplicação: $SERVICE_URL"

      - name: 🧹 Limpeza de imagens antigas
        if: success()
        run: |
          # Manter apenas as 5 imagens mais recentes
          gcloud artifacts docker images list $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE \
            --sort-by="~CREATE_TIME" \
            --limit=999 \
            --format="get(version)" | tail -n +6 | while read version; do
            if [ ! -z "$version" ]; then
              echo "🗑️ Removendo imagem antiga: $version"
              gcloud artifacts docker images delete \
                $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$version \
                --quiet
            fi
          done || echo "ℹ️ Nenhuma imagem antiga para remover"

  ---
  # 3️⃣ JOB: Build e Deploy para Staging
  deploy-staging:
    name: 🧪 Deploy Staging
    needs: tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔐 Configurar autenticação Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: ⚙️ Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configurar Docker para Artifact Registry
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: 🏗️ Build da imagem Docker
        run: |
          docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-staging:$GITHUB_SHA \
            --build-arg APP_ENV=staging \
            --build-arg APP_DEBUG=false \
            .

      - name: 📤 Push da imagem para Artifact Registry
        run: |
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-staging:$GITHUB_SHA

      - name: 🚀 Deploy no Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}-staging
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}-staging:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --port=8000
            --memory=512Mi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=80
            --timeout=300
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:laravel-db-staging
            --set-env-vars="APP_ENV=staging"
            --set-env-vars="APP_DEBUG=false"
            --set-env-vars="LOG_CHANNEL=stderr"
            --set-env-vars="DB_CONNECTION=mysql"
            --set-env-vars="DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:laravel-db-staging"
            --set-env-vars="DB_PORT=3306"
            --set-env-vars="DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }}"
            --set-env-vars="DB_USERNAME=${{ secrets.DB_USERNAME_STAGING }}"
            --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD_STAGING }}"
            --set-env-vars="APP_KEY=${{ secrets.LARAVEL_APP_KEY }}"
            --set-env-vars="CACHE_DRIVER=file"
            --set-env-vars="SESSION_DRIVER=file"
            --set-env-vars="QUEUE_CONNECTION=sync"

      - name: 🗄️ Executar migrações via Cloud Run Job
        run: |
          JOB_NAME="laravel-migrate-staging-$(echo $GITHUB_SHA | cut -c1-8)"
          
          gcloud run jobs create $JOB_NAME \
            --image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-staging:$GITHUB_SHA \
            --region=$REGION \
            --add-cloudsql-instances=$PROJECT_ID:$REGION:laravel-db-staging \
            --set-env-vars="APP_ENV=staging" \
            --set-env-vars="APP_DEBUG=false" \
            --set-env-vars="DB_CONNECTION=mysql" \
            --set-env-vars="DB_HOST=/cloudsql/$PROJECT_ID:$REGION:laravel-db-staging" \
            --set-env-vars="DB_PORT=3306" \
            --set-env-vars="DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }}" \
            --set-env-vars="DB_USERNAME=${{ secrets.DB_USERNAME_STAGING }}" \
            --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD_STAGING }}" \
            --set-env-vars="APP_KEY=${{ secrets.LARAVEL_APP_KEY }}" \
            --command="php" \
            --args="artisan,migrate,--force" \
            --memory=256Mi \
            --cpu=1 \
            --max-retries=3 \
            --parallelism=1 \
            --task-timeout=600 \
            --replace

          # Executar o job de migração
          gcloud run jobs execute $JOB_NAME --region=$REGION --wait

          # Limpar job após execução
          gcloud run jobs delete $JOB_NAME --region=$REGION --quiet

      - name: 🧹 Otimização pós-deploy
        run: |
          JOB_NAME="laravel-optimize-staging-$(echo $GITHUB_SHA | cut -c1-8)"
          
          # Criar job para otimização do Laravel
          gcloud run jobs create $JOB_NAME \
            --image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-staging:$GITHUB_SHA \
            --region=$REGION \
            --set-env-vars="APP_ENV=staging" \
            --set-env-vars="APP_DEBUG=false" \
            --set-env-vars="APP_KEY=${{ secrets.LARAVEL_APP_KEY }}" \
            --command="/bin/bash" \
            --args="-c,php artisan config:cache && php artisan route:cache && php artisan view:cache" \
            --memory=256Mi \
            --cpu=1 \
            --max-retries=2 \
            --parallelism=1 \
            --task-timeout=300 \
            --replace

          # Executar otimização
          gcloud run jobs execute $JOB_NAME --region=$REGION --wait

          # Limpar job
          gcloud run jobs delete $JOB_NAME --region=$REGION --quiet

      - name: 🔍 Verificação de saúde
        run: |
          # Aguardar o serviço ficar disponível
          sleep 30
          
          # Obter URL do serviço
          SERVICE_URL=$(gcloud run services describe $SERVICE-staging --region=$REGION --format='value(status.url)')
          
          # Verificar saúde da aplicação
          echo "🔍 Verificando saúde em: $SERVICE_URL"
          
          # Tentar conectar com retry
          for i in {1..5}; do
            if curl -f -s "$SERVICE_URL/api/hello" > /dev/null; then
              echo "✅ Aplicação está respondendo!"
              break
            else
              echo "⏳ Tentativa $i/5 falhou, aguardando 15s..."
              sleep 15
            fi
          done
          
          # Verificar se o endpoint principal está funcionando
          curl -f -s "$SERVICE_URL" > /dev/null || (echo "❌ Aplicação não está respondendo corretamente" && exit 1)
          
          echo "🎉 Deploy realizado com sucesso!"
          echo "🌐 URL da aplicação: $SERVICE_URL"

      - name: 🧹 Limpeza de imagens antigas
        if: success()
        run: |
          # Manter apenas as 5 imagens mais recentes
          gcloud artifacts docker images list $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-staging \
            --sort-by="~CREATE_TIME" \
            --limit=999 \
            --format="get(version)" | tail -n +6 | while read version; do
            if [ ! -z "$version" ]; then
              echo "🗑️ Removendo imagem antiga: $version"
              gcloud artifacts docker images delete \
                $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-staging:$version \
                --quiet
            fi
          done || echo "ℹ️ Nenhuma imagem antiga para remover"

  ---
  # 4️⃣ JOB: Notificação de Deploy
  notify:
    name: 📢 Notificar Resultado
    needs: [tests, deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result != 'skipped' || needs.deploy-staging.result != 'skipped')
    runs-on: ubuntu-latest

    steps:
      - name: 📊 Preparar status do deploy
        id: status
        run: |
          DEPLOY_RESULT="skipped"
          ENVIRONMENT=""
          
          if [ "${{ needs.deploy-production.result }}" != "skipped" ]; then
            DEPLOY_RESULT="${{ needs.deploy-production.result }}"
            ENVIRONMENT="production"
          elif [ "${{ needs.deploy-staging.result }}" != "skipped" ]; then
            DEPLOY_RESULT="${{ needs.deploy-staging.result }}"
            ENVIRONMENT="staging"
          fi
          
          if [ "${{ needs.tests.result }}" == "success" ] && [ "$DEPLOY_RESULT" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deploy realizado com sucesso!" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
          elif [ "${{ needs.tests.result }}" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Falha nos testes automatizados" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
          elif [ "$DEPLOY_RESULT" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Falha no deploy" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
          else
            echo "status=cancelled" >> $GITHUB_OUTPUT
            echo "message=⚠️ Deploy cancelado" >> $GITHUB_OUTPUT
            echo "color=ffc107" >> $GITHUB_OUTPUT
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: 📝 Resumo do deploy
        run: |
          echo "## 🚀 Resultado do Deploy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ambiente:** \`${{ steps.status.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.status.outputs.status }}" == "success" ]; then
            if [ "${{ github.ref_name }}" == "main" ]; then
              echo "🌐 **Produção:** https://${{ env.SERVICE }}-xxxxx-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
            else
              echo "🧪 **Staging:** https://${{ env.SERVICE }}-staging-xxxxx-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Jobs Executados" >> $GITHUB_STEP_SUMMARY
          echo "- **Testes:** ${{ needs.tests.result == 'success' && '✅' || '❌' }} ${{ needs.tests.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-production.result }}" != "skipped" ]; then
            echo "- **Deploy Produção:** ${{ needs.deploy-production.result == 'success' && '✅' || needs.deploy-production.result == 'failure' && '❌' || '⏭️' }} ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-staging.result }}" != "skipped" ]; then
            echo "- **Deploy Staging:** ${{ needs.deploy-staging.result == 'success' && '✅' || needs.deploy-staging.result == 'failure' && '❌' || '⏭️' }} ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          fi

# 📋 Configurações de segurança  
permissions:
  contents: read
  id-token: write
  actions: read
  checks: write

# 🔄 Configurações de concorrência
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false